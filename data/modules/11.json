{
  "11_01": {
    "question": "A transaction structure in a structure chart contains a control module that calls subordinate modules and frequently occur with menus.",
    "choices": {
      "A_11_01": { "choice": "True", "isCorrect": true },
      "B_11_01": { "choice": "False" }
    },
    "explanation": "Because transaction structures are high-level, they deal with processes closer to human interaction than transform structure, which are low-level thus deal with system details. That's why transaction structures frequently occur with menus.<br><br>See <b>p. 313</b>"
  },
  "11_02": {
    "question": "_____ refers to how well the lines of code within each module in a structure chart relate to each other.",
    "choices": {
      "A_11_02": { "choice": "Calculation" },
      "B_11_02": { "choice": "Cohesion", "isCorrect": true },
      "C_11_02": { "choice": "Control" },
      "D_11_02": { "choice": "Coupling" },
      "E_11_02": { "choice": "Fan-in" }
    }
  },
  "11_03": {
    "question": "When designing programs, structure charts help analysts create programs that are easy to understand and maintain.",
    "choices": {
      "A_11_03": { "choice": "True", "isCorrect": true },
      "B_11_03": { "choice": "False" }
    }
  },
  "11_04": {
    "question": "Many of the data stores in the logical DFD will be changed into encrypted word processing documents when a physical DFD is developed.",
    "choices": {
      "A_11_04": { "choice": "True" },
      "B_11_04": { "choice": "False", "isCorrect": true }
    },
    "explanation": "However, it's not common for data stores in a logical DFD to be transformed into \"encrypted word processing documents\" in a physical DFD. Instead, data stores might be represented as actual databases or files in a physical DFD"
  },
  "11_05": {
    "question": "The fifth step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "A_11_05": { "choice": "Update the metadata in the CASE repository", "isCorrect": true },
      "B_11_05": { "choice": "Draw a human-machine boundary" },
      "C_11_05": { "choice": "Add implementation references" },
      "D_11_05": { "choice": "Add system-related data stores, data flows and processes" },
      "E_11_05": { "choice": "Update the data elements in the data flows" }
    },
    "explanation": "She said in lecture we don't need to know about this."
  },
  "11_06": {
    "question": "In a structure chart, a <i>transaction structure</i> _____.",
    "choices": {
      "A_11_06": { "choice": "contains a control module that calls several subordinate modules in sequence, after which something \"happens\"" },
      "B_11_06": { "choice": "contains a control module that calls subordinate modules, each handling a particular transaction", "isCorrect": true },
      "C_11_06": { "choice": "contains a transactional loop" },
      "D_11_06": { "choice": "is a subordinate module that handles a particular transaction" },
      "E_11_06": { "choice": "is subordinate to subordinal modules" }
    }
  },
  "11_07": {
    "question": "When changing a logical DFD into a physical DFD, it might be necessary to do what?",
    "choices": {
      "A_11_07": { "choice": "Add system-related data stores, data flows and processes", "isCorrect": true },
      "B_11_07": { "choice": "Normalize the logical DFD into 3NF" },
      "C_11_07": { "choice": "Create the user-interface with smaller fonts" },
      "D_11_07": { "choice": "Change the system architecture to three-tiered architecture" },
      "E_11_07": { "choice": "Delete extraneous data stores and delete extraneous data flows" }
    }
  },
  "11_08": {
    "question": "When designing programs, structure charts show all the components of code that must be included in a program at a high level.",
    "choices": {
      "A_11_08": { "choice": "True", "isCorrect": true },
      "B_11_08": { "choice": "False" }
    }
  },
  "11_09": {
    "question": "Generally, transaction structures on a structure chart will have what?",
    "choices": {
      "A_11_09": { "choice": "Many afferent processes" },
      "B_11_09": { "choice": "Many efferent processes", "isCorrect": true },
      "C_11_09": { "choice": "Many data couples" },
      "D_11_09": { "choice": "Many control couples" },
      "E_11_09": { "choice": "Many conditional couples" }
    },
    "explanation": "Transform structures (low level modules) &lt;--&gt; afferent processes (system inputs)<br>Transactional structures (high level modules) &lt;--&gt; efferent processes (system outputs)"
  },
  "11_10": {
    "question": "An audit control / audit logfile might be a system related process, data flow and data store that would be added when creating physical DFDs.",
    "choices": {
      "A_11_10": { "choice": "True", "isCorrect": true },
      "B_11_10": { "choice": "False" }
    }
  },
  "11_11": {
    "question": "The fourth step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "A_11_11": { "choice": "Update the metadata in the CASE repository" },
      "B_11_11": { "choice": "Draw a human-machine boundary" },
      "C_11_11": { "choice": "Add implementation references" },
      "D_11_11": { "choice": "Add system-related data stores, data flows and processes" },
      "E_11_11": { "choice": "Update the data elements in the data flows", "isCorrect": true }
    }
  },
  "11_12": {
    "question": "Jim is working from a leveled DFD and creating structure charts. He is finding that the lower levels of the DFD generally correspond to transform structures.",
    "choices": {
      "A_11_12": { "choice": "True", "isCorrect": true },
      "B_11_12": { "choice": "False" }
    }
  },
  "11_13": {
    "question": "What is pseudocode?",
    "choices": {
      "A_11_13": { "choice": "A language popularized by Feinstein and Longenecker in the 1990&#39;s" },
      "B_11_13": { "choice": "A detailed outline of the lines of code that need to be written", "isCorrect": true },
      "C_11_13": { "choice": "A &#39;pretend&#39; syntax inherent in all CASE tools" },
      "D_11_13": { "choice": "The translation of code into ASCII" },
      "E_11_13": { "choice": "A dialect of Visual Basic only used in program design" }
    }
  },
  "11_14": {
    "question": "The Human-Machine Boundary is what?",
    "choices": {
      "A_11_14": { "choice": "Is the keyboard and screen" },
      "B_11_14": { "choice": "Builds on research in ergonometric" },
      "C_11_14": { "choice": "Is a line drawn on the physical DFD to separate human action from automated processes", "isCorrect": true },
      "D_11_14": { "choice": "Is a part of developing the HCI interface" },
      "E_11_14": { "choice": "Separates where manual processes are separated by human completed processes" }
    }
  },
  "11_15": {
    "question": "In a structure chart, the element that is drawn as an empty circle with an attached arrow is known as a(n) _____.",
    "choices": {
      "A_11_15": { "choice": "conditional line" },
      "B_11_15": { "choice": "connector" },
      "C_11_15": { "choice": "control couple" },
      "D_11_15": { "choice": "data couple", "isCorrect": true },
      "E_11_15": { "choice": "module" }
    }
  },
  "11_16": {
    "question": "Generally, transform structures on a structure chart will have what?",
    "choices": {
      "A_11_16": { "choice": "Many afferent processes", "isCorrect": true },
      "B_11_16": { "choice": "Many efferent processes" },
      "C_11_16": { "choice": "Many data couples" },
      "D_11_16": { "choice": "Many control couples" },
      "E_11_16": { "choice": "Many conditional couples" }
    },
    "explanation": "Transform structures (low level modules) &lt;--&gt; afferent processes (system inputs)<br>Transactional structures (high level modules) &lt;--&gt; efferent processes (system outputs)"
  },
  "11_17": {
    "question": "Structure charts show the user interface.",
    "choices": {
      "A_11_17": { "choice": "True" },
      "B_11_17": { "choice": "False", "isCorrect": true }
    }
  },
  "11_18": {
    "question": "Functional, coincidental, and temporal are all types of cohesion.",
    "choices": {
      "A_11_18": { "choice": "True", "isCorrect": true },
      "B_11_18": { "choice": "False" }
    },
    "explanation": "Types of cohesion are (from best to worst): functional, sequential, communicational, procedural, temporal, logical, and coincidental.<br><b>(figure 9-14, p. 321)</b>"
  },
  "11_19": {
    "question": "Micah is adding implementation resources to change a logical DFD into a physical DFD. He should describe databases, files, tables, and processes as they will be implemented on the computer.",
    "choices": {
      "A_11_19": { "choice": "True", "isCorrect": true },
      "B_11_19": { "choice": "False" }
    }
  },
  "11_20": {
    "question": "When designing programs, structure charts are arranged in a hierarchical format that implies sequence.",
    "choices": {
      "A_11_20": { "choice": "True", "isCorrect": true },
      "B_11_20": { "choice": "False" }
    }
  },
  "11_21": {
    "question": "Because project teams rely more on packaged software, program design is no longer needed.",
    "choices": {
      "A_11_21": { "choice": "True" },
      "B_11_21": { "choice": "False", "isCorrect": true }
    }
  },
  "11_22": {
    "question": "A structure chart is often completed in one attempt.",
    "choices": {
      "A_11_22": { "choice": "True" },
      "B_11_22": { "choice": "False", "isCorrect": true }
    }
  },
  "11_23": {
    "question": "When designing programs, structure charts are generally implemented with control flags that pass from the control modules to the subordinate modules.",
    "choices": {
      "A_11_23": { "choice": "True" },
      "B_11_23": { "choice": "False", "isCorrect": true }
    },
    "explanation": "Control flags are variables that indicate how the program should run, e.g., when module 1.1 passes the end-of-file flag to module 1.0, module 1.0 determines it should no longer call module 1.1<br><br>They are generally passed from submodule to control module, not the other way around."
  },
  "11_24": {
    "question": "Couples in structure charts always show two modules that are executed together and are drawn with horizontal lines at the top and bottom.",
    "choices": {
      "A_11_24": { "choice": "True" },
      "B_11_24": { "choice": "False", "isCorrect": true }
    },
    "explanation": "Couples show data is passed from one module to another. They are drawn with arrows."
  },
  "11_25": {
    "question": "The first step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "A_11_25": { "choice": "Update the metadata in the CASE repository" },
      "B_11_25": { "choice": "Draw a human-machine boundary" },
      "C_11_25": { "choice": "Add implementation references", "isCorrect": true },
      "D_11_25": { "choice": "Add system-related data stores, data flows and processes" },
      "E_11_25": { "choice": "Update the data elements in the data flows" }
    }
  },
  "11_26": {
    "question": "A general suggestion about using couples in drawing structure charts is what?",
    "choices": {
      "A_11_26": { "choice": "The use of many couples clarify the processing" },
      "B_11_26": { "choice": "It is best to be conservative when applying couples to your diagram", "isCorrect": true },
      "C_11_26": { "choice": "To use &#39;combination&#39; couples when both data couples and control couples are needed" },
      "D_11_26": { "choice": "You should have at least twice as many afferent couples as efferent couples" },
      "E_11_26": { "choice": "Use only data couples and no control couples" }
    },
    "explanation": "In this context, being conservative means minimizing the number of couples (connections between modules) to keep the diagram clear and manageable. The goal is to avoid overly complex or tangled relationships that could make the system harder to understand and maintain.<br><br>So, while using combination couples is useful in some cases, the general guideline is to limit the number of couples to maintain a clean and understandable structure chart."
  },
  "11_27": {
    "question": "The third step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "A_11_27": { "choice": "Update the metadata in the CASE repository" },
      "B_11_27": { "choice": "Draw a human-machine boundary" },
      "C_11_27": { "choice": "Add implementation references" },
      "D_11_27": { "choice": "Add system-related data stores, data flows, and processes", "isCorrect": true },
      "E_11_27": { "choice": "Update the data elements in the data flows" }
    }
  },
  "11_28": {
    "question": "As a structure chart is constructed, it is generally best to build modules with which of the following?",
    "choices": {
      "A_11_28": { "choice": "High cohesion", "isCorrect": true },
      "B_11_28": { "choice": "Highly coupled" },
      "C_11_28": { "choice": "High fan-out" },
      "D_11_28": { "choice": "Have the word \"and\" in the module title" },
      "E_11_28": { "choice": "A high level of coincidental cohesion" }
    }
  },
  "11_29": {
    "question": "In determining if a process is to be automated, the project team will do all of the following EXCEPT:",
    "choices": {
      "A_11_29": { "choice": "Weigh the costs" },
      "B_11_29": { "choice": "Redraw the logical DFD as a combined logical/physical DFD", "isCorrect": true },
      "C_11_29": { "choice": "Determine benefits" },
      "D_11_29": { "choice": "Evaluate the efficiency" },
      "E_11_29": { "choice": "Consider the integrity of the process to the system" }
    }
  },
  "11_30": {
    "question": "Because (a) preexisting code needs to be understood, organized, and pieced together; and (b) it is still common for the project team to have to write some code and adapt packages to the business environment, it is therefore good for analysts to fully understand program design.",
    "choices": {
      "A_11_30": { "choice": "True", "isCorrect": true },
      "B_11_30": { "choice": "False" }
    }
  },
  "11_31": {
    "question": "Analysts can build in the three structures of sequence, selection and iteration into structure charts.",
    "choices": {
      "A_11_31": { "choice": "True", "isCorrect": true },
      "B_11_31": { "choice": "False" }
    }
  },
  "11_32": {
    "question": "Every part of a system that is not automated will what?",
    "choices": {
      "A_11_32": { "choice": "Be ignored in the implementation of the system" },
      "B_11_32": { "choice": "Be drawn as only logical DFDs not physical DFDs" },
      "C_11_32": { "choice": "Be outside the human-machine boundary", "isCorrect": true },
      "D_11_32": { "choice": "Go back through the analysis phase to become automated" },
      "E_11_32": { "choice": "Will be drawn as diamond shapes on the structure charts" }
    }
  },
  "11_33": {
    "question": "Analysts can use structure charts to design programming logic.",
    "choices": {
      "A_11_33": { "choice": "True", "isCorrect": true },
      "B_11_33": { "choice": "False" }
    }
  },
  "11_34": {
    "question": "There are some &#39;system-related&#39; data stores, data flows and processes that must be added when creating the physical DFD.",
    "choices": {
      "A_11_34": { "choice": "True", "isCorrect": true },
      "B_11_34": { "choice": "False" }
    }
  },
  "11_35": {
    "question": "Beth is considering a simple process for immediate orders. When processing an immediate order, a phone clerk writes the order on a paper form. Which of the following might be a reason NOT to automate this process?",
    "choices": {
      "A_11_35": { "choice": "The clerk could make errors when writing the information wrong on the paper form" },
      "B_11_35": { "choice": "The paper form could be lost when sent to the order filling /shipping area" },
      "C_11_35": { "choice": "The writing on the paper form could be hard to decipher" },
      "D_11_35": { "choice": "The costs to automate might be significantly higher than doing it manually", "isCorrect": true },
      "E_11_35": { "choice": "The time to get the paper form from the clerk&#39;s desk to the order filling / shipping area is one day or longer" }
    },
    "explanation": "The other reasons are all upsides of automation, this one is the only downside."
  },
  "11_36": {
    "question": "A diamond on a structure chart shows sequence – like a baseball player would go to first base, then second, third and home.",
    "choices": {
      "A_11_36": { "choice": "True" },
      "B_11_36": { "choice": "False", "isCorrect": true }
    }
  },
  "11_37": {
    "question": "Generally, transaction structures occur at lower levels of a structure chart.",
    "choices": {
      "A_11_37": { "choice": "True" },
      "B_11_37": { "choice": "False", "isCorrect": true }
    }
  },
  "11_38": {
    "question": "The second step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "A_11_38": { "choice": "Update the metadata in the CASE repository" },
      "B_11_38": { "choice": "Draw a human-machine boundary", "isCorrect": true },
      "C_11_38": { "choice": "Add implementation references" },
      "D_11_38": { "choice": "Add system-related data stores, data flows and processes" },
      "E_11_38": { "choice": "Update the data elements in the data flows" }
    },
    "explanation": "Maryam said we don't need to learn this."
  },
  "11_39": {
    "question": "When drawing the human-machine boundary, all processes in the physical DFD will be automated, so only external entities will be excluded.",
    "choices": {
      "A_11_39": { "choice": "True" },
      "B_11_39": { "choice": "False", "isCorrect": true }
    },
    "explanation": "A system may contain both manual and automated processes. A human-machine boundary shows which ones are manual."
  },
  "11_40": {
    "question": "A good indication of needing a transaction structure on a structure chart occurs when a DFD shows a single data flow entering a process that produces multiple data flows as outputs.",
    "choices": {
      "A_11_40": { "choice": "True", "isCorrect": true },
      "B_11_40": { "choice": "False" }
    },
    "explanation": "Transactional structures mostly handle outputs, while transform structures mostly handle inputs. So having many data flow out and few data flow in indicates a transactional structure."
  },
  "11_41": {
    "question": "Control couples show the passing of parameters or system related messages between modules (like &#39;end-of-file&#39;).",
    "choices": {
      "A_11_41": { "choice": "True", "isCorrect": true },
      "B_11_41": { "choice": "False" }
    },
    "explanation": "Control flags are variables that indicate how the program should run, e.g., when module 1.1 passes the end-of-file flag to module 1.0, module 1.0 determines it should no longer call module 1.1"
  },
  "11_42": {
    "question": "Analysts design programs in the design phase of the SDLC, programmers code programs in the Implementation phase.",
    "choices": {
      "A_11_42": { "choice": "True", "isCorrect": true },
      "B_11_42": { "choice": "False" }
    }
  },
  "11_43": {
    "question": "A control module can also be called a library module and is a set of reusable code.",
    "choices": {
      "A_11_43": { "choice": "True" },
      "B_11_43": { "choice": "False", "isCorrect": true }
    },
    "explanation": "Control module cannot be library module"
  },
  "11_44": {
    "question": "An afferent process is an input process on a structure chart.",
    "choices": {
      "A_11_44": { "choice": "True", "isCorrect": true },
      "B_11_44": { "choice": "False" }
    },
    "explanation": "\"Afferent processes are processes that provide inputs into the system, central processes perform critical functions in the operation of the system, and efferent processes deal with system outputs.\" - <b>textbook, p. 330</b> (not covered in module 11 slides)"
  },
  "11_45": {
    "question": "The three basic kinds of processes on a process module are afferent, central, and efferent.",
    "choices": {
      "A_11_45": { "choice": "True", "isCorrect": true },
      "B_11_45": { "choice": "False" }
    }
  },
  "11_46": {
    "question": "A signal of poor cohesion could be the presence of control flags that are passed down to subordinate modules.",
    "choices": {
      "A_11_46": { "choice": "True", "isCorrect": true },
      "B_11_46": { "choice": "False" }
    }
  },
  "11_47": {
    "question": "Physical DFDs show additional details, such as what tables in the database replace data stores on the logical DFD",
    "choices": {
      "A_11_47": { "choice": "True", "isCorrect": true },
      "B_11_47": { "choice": "False" }
    }
  },
  "11_48": {
    "question": "Structure charts show sequence.",
    "choices": {
      "A_11_48": { "choice": "True", "isCorrect": true },
      "B_11_48": { "choice": "False" }
    }
  },
  "11_49": {
    "question": "A temptation when moving from analysis to design of a system is to jump right into coding.",
    "choices": {
      "A_11_49": { "choice": "True", "isCorrect": true },
      "B_11_49": { "choice": "False" }
    }
  },
  "11_50": {
    "question": "Fan-In describes the number of subordinates that communicate with the control module.",
    "choices": {
      "A_11_50": { "choice": "True" },
      "B_11_50": { "choice": "False", "isCorrect": true }
    },
    "explanation": "Fan-In refers to the number of modules that send data to a particular module, not the number of subordinates communicating with the control module. In the context of structure charts or module design, Fan-In indicates how many other modules are dependent on or send data to a given module.<br><br>The statement you mentioned seems to describe Fan-Out, which refers to the number of subordinates or modules that a control module communicates with."
  },
  "11_51": {
    "question": "When designing programs, structure charts may have on-page and off-page connectors.",
    "choices": {
      "A_11_51": { "choice": "True", "isCorrect": true },
      "B_11_51": { "choice": "False" }
    }
  },
  "11_52": {
    "question": "The three types of basic processes on a process model are which of the following?",
    "choices": {
      "A_11_52": { "choice": "Sequence, selection and iteration processes" },
      "B_11_52": { "choice": "Navigation, status and work processes" },
      "C_11_52": { "choice": "Afferent, central and efferent processes", "isCorrect": true },
      "D_11_52": { "choice": "Batch, online and real time processes" },
      "E_11_52": { "choice": "Singular, bilateral and library processes" }
    }
  },
  "11_53": {
    "question": "A structure chart shows sequence, selection and data flows.",
    "choices": {
      "A_11_53": { "choice": "True" },
      "B_11_53": { "choice": "False", "isCorrect": true }
    },
    "explanation": "Shows sequence, selection, and ITERATION"
  },
  "11_54": {
    "question": "Reusable modules, which are represented in the structure chart as rectangles with vertical lines on both sides, may often appear several times in a structure chart. These are called _____ modules.",
    "choices": {
      "A_11_54": { "choice": "conditional" },
      "B_11_54": { "choice": "control" },
      "C_11_54": { "choice": "library", "isCorrect": true },
      "D_11_54": { "choice": "loop" },
      "E_11_54": { "choice": "off-page connector" }
    }
  },
  "11_55": {
    "question": "In a structure chart, the purpose of a control couple is to do what?",
    "choices": {
      "A_11_55": { "choice": "Pass parameters from a subordinate module to the control module", "isCorrect": true },
      "B_11_55": { "choice": "Pass parameters from the control modules to a subordinate module" },
      "C_11_55": { "choice": "Pass data from a subordinate module to the control module" },
      "D_11_55": { "choice": "Pass data from the control module to a subordinate module" },
      "E_11_55": { "choice": "Chaperone the dance for programmers on the project" }
    }
  },
  "11_56": {
    "question": "Structure charts show couples.",
    "choices": {
      "A_11_56": { "choice": "True", "isCorrect": true },
      "B_11_56": { "choice": "False" }
    }
  },
  "11_57": {
    "question": "A structure chart is composed of modules that work together to form a program.",
    "choices": {
      "A_11_57": { "choice": "True", "isCorrect": true },
      "B_11_57": { "choice": "False" }
    }
  },
  "11_58": {
    "question": "Structure charts emphasize structure and reusability.",
    "choices": {
      "A_11_58": { "choice": "True", "isCorrect": true },
      "B_11_58": { "choice": "False" }
    }
  },
  "11_59": {
    "question": "An effective process is an output process on a structure chart.",
    "choices": {
      "A_11_59": { "choice": "True" },
      "B_11_59": { "choice": "False", "isCorrect": true }
    },
    "explanation": "It's called <b>efferent</b> process"
  },
  "11_60": {
    "question": "Data couples are shown by arrows with empty circles and show how data flows between modules.",
    "choices": {
      "A_11_60": { "choice": "True", "isCorrect": true },
      "B_11_60": { "choice": "False" }
    },
    "explanation": "Empty circle = data couple<br>Filled circle = control couple"
  },
  "11_61": {
    "question": "By definition, external entities on the DFD are what?",
    "choices": {
      "A_11_61": { "choice": "Are used as the starting point for the physical data flow diagram" },
      "B_11_61": { "choice": "Are outside the scope of the system", "isCorrect": true },
      "C_11_61": { "choice": "Will be the top of the structure chart" },
      "D_11_61": { "choice": "Will become database table entries" },
      "E_11_61": { "choice": "Are updated with metadata to become part of the physical DFD" }
    }
  },
  "11_62": {
    "question": "When creating the physical DFD, you may want to capture system information like date and time of update and user-id of the person who did the update.",
    "choices": {
      "A_11_62": { "choice": "True", "isCorrect": true },
      "B_11_62": { "choice": "False" }
    }
  },
  "11_63": {
    "question": "In most automated cases, data stores from logical DFDs will be converted to what?",
    "choices": {
      "A_11_63": { "choice": "Binary tables" },
      "B_11_63": { "choice": "DVD disks" },
      "C_11_63": { "choice": "A thumb drive" },
      "D_11_63": { "choice": "Into database files / tables", "isCorrect": true },
      "E_11_63": { "choice": "Encrypted hexadecimal values" }
    }
  },
  "11_64": {
    "question": "There are two symbols that describe special types of control in a structure chart. They are a curved arrow and a diamond. These symbols represent _____ and _____.",
    "choices": {
      "A_11_64": { "choice": "connector, conditional line" },
      "B_11_64": { "choice": "control, subordinate" },
      "C_11_64": { "choice": "library module, conditional line" },
      "D_11_64": { "choice": "loop, conditional line", "isCorrect": true },
      "E_11_64": { "choice": "loop, connector" }
    }
  },
  "11_65": {
    "question": "The Human-Machine boundary is part of the Human-Computer Interface into usability systems.",
    "choices": {
      "A_11_65": { "choice": "True" },
      "B_11_65": { "choice": "False", "isCorrect": true }
    },
    "explanation": "As far as I can tell, \"Human-Computer Interface\" isn't a term. The textbook does, however, mention Human-Computer Inter<i>action</i> in <b>p. 320</b>:<br><br>\"Physical DFDs differentiate human and computer interaction by a human–machine boundary, a line drawn on the model to separate human action from automated processes.\""
  },
  "11_66": {
    "question": "Factoring is the process of separating out a function from a module in order to create a module of its own.",
    "choices": {
      "A_11_66": { "choice": "True", "isCorrect": true },
      "B_11_66": { "choice": "False" }
    }
  },
  "11_67": {
    "question": "In a structure chart, the element that communicates that a message or a system flag is being passed from one module to another is known as a(n) _____.",
    "choices": {
      "A_11_67": { "choice": "conditional line" },
      "B_11_67": { "choice": "connector" },
      "C_11_67": { "choice": "control couple", "isCorrect": true },
      "D_11_67": { "choice": "data couple" },
      "E_11_67": { "choice": "loop" }
    },
    "explanation": "Control couples<br>–> Depicted by arrow with filled-in circle<br>–> Represent the passing of control flags <br>(control flags are variables that indicate how the program should run, e.g., when module 1.1 passes the end-of-file flag to module 1.0, module 1.0 determines it should no longer call module 1.1)"
  },
  "11_68": {
    "question": "Structure charts show selection.",
    "choices": {
      "A_11_68": { "choice": "True", "isCorrect": true },
      "B_11_68": { "choice": "False" }
    },
    "explanation": "Selection = whether the execution of a module is conditional"
  },
  "11_69": {
    "question": "Programmers can take the logical DFDs and directly implement into code by compiling the metadata in the CASE tools.",
    "choices": {
      "A_11_69": { "choice": "True" },
      "B_11_69": { "choice": "False", "isCorrect": true }
    }
  }
}
