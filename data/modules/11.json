{
  "11.01": {
    "question": "A transaction structure in a structure chart contains a control module that calls subordinate modules and frequently occur with menus.",
    "choices": {
      "11.01.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.01.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.02": {
    "question": "_____ refers to how well the lines of code within each module in a structure chart relate to each other.",
    "choices": {
      "11.02.A": {
        "choice": "Calculation",
        "isCorrect": false
      },
      "11.02.B": {
        "choice": "Cohesion",
        "isCorrect": true
      },
      "11.02.C": {
        "choice": "Control",
        "isCorrect": false
      },
      "11.02.D": {
        "choice": "Coupling",
        "isCorrect": false
      },
      "11.02.E": {
        "choice": "Fan-in",
        "isCorrect": false
      }
    }
  },
  "11.03": {
    "question": "When designing programs, structure charts help analysts create programs that are easy to understand and maintain.",
    "choices": {
      "11.03.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.03.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.04": {
    "question": "Many of the data stores in the logical DFD will be changed into encrypted word processing documents when a physical DFD is developed.",
    "choices": {
      "11.04.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.04.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.05": {
    "question": "The fifth step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "11.05.A": {
        "choice": "Update the metadata in the CASE repository",
        "isCorrect": true
      },
      "11.05.B": {
        "choice": "Draw a human-machine boundary",
        "isCorrect": false
      },
      "11.05.C": {
        "choice": "Add implementation references",
        "isCorrect": false
      },
      "11.05.D": {
        "choice": "Add system-related data stores, data flows and processes",
        "isCorrect": false
      },
      "11.05.E": {
        "choice": "Update the data elements in the data flows",
        "isCorrect": false
      }
    }
  },
  "11.06": {
    "question": "In a structure chart, a <i>transaction structure</i> _____.",
    "choices": {
      "11.06.A": {
        "choice": "contains a control module that calls several subordinate modules in sequence, after which something \"happens\"",
        "isCorrect": false
      },
      "11.06.B": {
        "choice": "contains a control module that calls subordinate modules, each handling a particular transaction",
        "isCorrect": true
      },
      "11.06.C": {
        "choice": "contains a transactional loop",
        "isCorrect": false
      },
      "11.06.D": {
        "choice": "is a subordinate module that handles a particular transaction",
        "isCorrect": false
      },
      "11.06.E": {
        "choice": "is subordinate to subordinal modules",
        "isCorrect": false
      }
    }
  },
  "11.07": {
    "question": "When changing a logical DFD into a physical DFD, it might be necessary to do what?",
    "choices": {
      "11.07.A": {
        "choice": "Add system-related data stores, data flows and processes",
        "isCorrect": true
      },
      "11.07.B": {
        "choice": "Normalize the logical DFD into 3NF",
        "isCorrect": false
      },
      "11.07.C": {
        "choice": "Create the user-interface with smaller fonts",
        "isCorrect": false
      },
      "11.07.D": {
        "choice": "Change the system architecture to three-tiered architecture",
        "isCorrect": false
      },
      "11.07.E": {
        "choice": "Delete extraneous data stores and delete extraneous data flows",
        "isCorrect": false
      }
    }
  },
  "11.08": {
    "question": "When designing programs, structure charts show all the components of code that must be included in a program at a high level.",
    "choices": {
      "11.08.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.08.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.09": {
    "question": "Generally, transaction structures on a structure chart will have what?",
    "choices": {
      "11.09.A": {
        "choice": "Many afferent processes",
        "isCorrect": false
      },
      "11.09.B": {
        "choice": "Many efferent processes",
        "isCorrect": true
      },
      "11.09.C": {
        "choice": "Many data couples",
        "isCorrect": false
      },
      "11.09.D": {
        "choice": "Many control couples",
        "isCorrect": false
      },
      "11.09.E": {
        "choice": "Many conditional couples",
        "isCorrect": false
      }
    }
  },
  "11.10": {
    "question": "An audit control / audit logfile might be a system related process, data flow and data store that would be added when creating physical DFDs.",
    "choices": {
      "11.10.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.10.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.11": {
    "question": "The fourth step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "11.11.A": {
        "choice": "Update the metadata in the CASE repository",
        "isCorrect": false
      },
      "11.11.B": {
        "choice": "Draw a human-machine boundary",
        "isCorrect": false
      },
      "11.11.C": {
        "choice": "Add implementation references",
        "isCorrect": false
      },
      "11.11.D": {
        "choice": "Add system-related data stores, data flows and processes",
        "isCorrect": false
      },
      "11.11.E": {
        "choice": "Update the data elements in the data flows",
        "isCorrect": true
      }
    }
  },
  "11.12": {
    "question": "Jim is working from a leveled DFD and creating structure charts. He is finding that the lower levels of the DFD generally correspond to transform structures.",
    "choices": {
      "11.12.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.12.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.13": {
    "question": "What is pseudocode?",
    "choices": {
      "11.13.A": {
        "choice": "A language popularized by Feinstein and Longenecker in the 1990&#39;s",
        "isCorrect": false
      },
      "11.13.B": {
        "choice": "A detailed outline of the lines of code that need to be written",
        "isCorrect": true
      },
      "11.13.C": {
        "choice": "A &#39;pretend&#39; syntax inherent in all CASE tools",
        "isCorrect": false
      },
      "11.13.D": {
        "choice": "The translation of code into ASCII",
        "isCorrect": false
      },
      "11.13.E": {
        "choice": "A dialect of Visual Basic only used in program design",
        "isCorrect": false
      }
    }
  },
  "11.14": {
    "question": "The Human-Machine Boundary is what?",
    "choices": {
      "11.14.A": {
        "choice": "Is the keyboard and screen",
        "isCorrect": false
      },
      "11.14.B": {
        "choice": "Builds on research in ergonometric",
        "isCorrect": false
      },
      "11.14.C": {
        "choice": "Is a line drawn on the physical DFD to separate human action from automated processes",
        "isCorrect": true
      },
      "11.14.D": {
        "choice": "Is a part of developing the HCI interface",
        "isCorrect": false
      },
      "11.14.E": {
        "choice": "Separates where manual processes are separated by human completed processes",
        "isCorrect": false
      }
    }
  },
  "11.15": {
    "question": "In a structure chart, the element that is drawn as an empty circle with an attached arrow is known as a(n) _____.",
    "choices": {
      "11.15.A": {
        "choice": "conditional line",
        "isCorrect": false
      },
      "11.15.B": {
        "choice": "connector",
        "isCorrect": false
      },
      "11.15.C": {
        "choice": "control couple",
        "isCorrect": false
      },
      "11.15.D": {
        "choice": "data couple",
        "isCorrect": true
      },
      "11.15.E": {
        "choice": "module",
        "isCorrect": false
      }
    }
  },
  "11.16": {
    "question": "Generally, transform structures on a structure chart will have what?",
    "choices": {
      "11.16.A": {
        "choice": "Many afferent processes",
        "isCorrect": true
      },
      "11.16.B": {
        "choice": "Many efferent processes",
        "isCorrect": false
      },
      "11.16.C": {
        "choice": "Many data couples",
        "isCorrect": false
      },
      "11.16.D": {
        "choice": "Many control couples",
        "isCorrect": false
      },
      "11.16.E": {
        "choice": "Many conditional couples",
        "isCorrect": false
      }
    }
  },
  "11.17": {
    "question": "Structure charts show the user interface.",
    "choices": {
      "11.17.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.17.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.18": {
    "question": "Functional, coincidental, and temporal are all types of cohesion.",
    "choices": {
      "11.18.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.18.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.19": {
    "question": "Micah is adding implementation resources to change a logical DFD into a physical DFD. He should describe databases, files, tables, and processes as they will be implemented on the computer.",
    "choices": {
      "11.19.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.19.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.20": {
    "question": "When designing programs, structure charts are arranged in a hierarchical format that implies sequence.",
    "choices": {
      "11.20.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.20.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.21": {
    "question": "Because project teams rely more on packaged software, program design is no longer needed.",
    "choices": {
      "11.21.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.21.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.22": {
    "question": "A structure chart is often completed in one attempt.",
    "choices": {
      "11.22.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.22.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.23": {
    "question": "When designing programs, structure charts are generally implemented with control flags that pass from the control modules to the subordinate modules.",
    "choices": {
      "11.23.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.23.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.24": {
    "question": "Couples in structure charts always show two modules that are executed together and are drawn with horizontal lines at the top and bottom.",
    "choices": {
      "11.24.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.24.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.25": {
    "question": "The first step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "11.25.A": {
        "choice": "Update the metadata in the CASE repository",
        "isCorrect": false
      },
      "11.25.B": {
        "choice": "Draw a human-machine boundary",
        "isCorrect": false
      },
      "11.25.C": {
        "choice": "Add implementation references",
        "isCorrect": true
      },
      "11.25.D": {
        "choice": "Add system-related data stores, data flows and processes",
        "isCorrect": false
      },
      "11.25.E": {
        "choice": "Update the data elements in the data flows",
        "isCorrect": false
      }
    }
  },
  "11.26": {
    "question": "A general suggestion about using couples in drawing structure charts is what?",
    "choices": {
      "11.26.A": {
        "choice": "The use of many couples clarify the processing",
        "isCorrect": false
      },
      "11.26.B": {
        "choice": "It is best to be conservative when applying couples to your diagram",
        "isCorrect": true
      },
      "11.26.C": {
        "choice": "To use &#39;combination&#39; couples when both data couples and control couples are needed",
        "isCorrect": false
      },
      "11.26.D": {
        "choice": "You should have at least twice as many afferent couples as efferent couples",
        "isCorrect": false
      },
      "11.26.E": {
        "choice": "Use only data couples and no control couples",
        "isCorrect": false
      }
    }
  },
  "11.27": {
    "question": "The third step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "11.27.A": {
        "choice": "Update the metadata in the CASE repository",
        "isCorrect": false
      },
      "11.27.B": {
        "choice": "Draw a human-machine boundary",
        "isCorrect": false
      },
      "11.27.C": {
        "choice": "Add implementation references",
        "isCorrect": false
      },
      "11.27.D": {
        "choice": "Add system-related data stores, data flows, and processes",
        "isCorrect": true
      },
      "11.27.E": {
        "choice": "Update the data elements in the data flows",
        "isCorrect": false
      }
    }
  },
  "11.28": {
    "question": "As a structure chart is constructed, it is generally best to build modules with which of the following?",
    "choices": {
      "11.28.A": {
        "choice": "High cohesion",
        "isCorrect": true
      },
      "11.28.B": {
        "choice": "Highly coupled",
        "isCorrect": false
      },
      "11.28.C": {
        "choice": "High fan-out",
        "isCorrect": false
      },
      "11.28.D": {
        "choice": "Have the word \"and\" in the module title",
        "isCorrect": false
      },
      "11.28.E": {
        "choice": "A high level of coincidental cohesion",
        "isCorrect": false
      }
    }
  },
  "11.29": {
    "question": "In determining if a process is to be automated, the project team will do all of the following EXCEPT:",
    "choices": {
      "11.29.A": {
        "choice": "Weigh the costs",
        "isCorrect": false
      },
      "11.29.B": {
        "choice": "Redraw the logical DFD as a combined logical/physical DFD",
        "isCorrect": true
      },
      "11.29.C": {
        "choice": "Determine benefits",
        "isCorrect": false
      },
      "11.29.D": {
        "choice": "Evaluate the efficiency",
        "isCorrect": false
      },
      "11.29.E": {
        "choice": "Consider the integrity of the process to the system",
        "isCorrect": false
      }
    }
  },
  "11.30": {
    "question": "Because (a) preexisting code needs to be understood, organized, and pieced together; and (b) it is still common for the project team to have to write some code and adapt packages to the business environment, it is therefore good for analysts to fully understand program design.",
    "choices": {
      "11.30.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.30.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.31": {
    "question": "Analysts can build in the three structures of sequence, selection and iteration into structure charts.",
    "choices": {
      "11.31.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.31.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.32": {
    "question": "Every part of a system that is not automated will what?",
    "choices": {
      "11.32.A": {
        "choice": "Be ignored in the implementation of the system",
        "isCorrect": false
      },
      "11.32.B": {
        "choice": "Be drawn as only logical DFDs not physical DFDs",
        "isCorrect": false
      },
      "11.32.C": {
        "choice": "Be outside the human-machine boundary",
        "isCorrect": true
      },
      "11.32.D": {
        "choice": "Go back through the analysis phase to become automated",
        "isCorrect": false
      },
      "11.32.E": {
        "choice": "Will be drawn as diamond shapes on the structure charts",
        "isCorrect": false
      }
    }
  },
  "11.33": {
    "question": "Analysts can use structure charts to design programming logic.",
    "choices": {
      "11.33.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.33.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.34": {
    "question": "There are some &#39;system-related&#39; data stores, data flows and processes that must be added when creating the physical DFD.",
    "choices": {
      "11.34.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.34.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.35": {
    "question": "Beth is considering a simple process for immediate orders. When processing an immediate order, a phone clerk writes the order on a paper form. Which of the following might be a reason NOT to automate this process?",
    "choices": {
      "11.35.A": {
        "choice": "The clerk could make errors when writing the information wrong on the paper form",
        "isCorrect": false
      },
      "11.35.B": {
        "choice": "The paper form could be lost when sent to the order filling /shipping area",
        "isCorrect": false
      },
      "11.35.C": {
        "choice": "The writing on the paper form could be hard to decipher",
        "isCorrect": false
      },
      "11.35.D": {
        "choice": "The costs to automate might be significantly higher than doing it manually",
        "isCorrect": true
      },
      "11.35.E": {
        "choice": "The time to get the paper form from the clerk&#39;s desk to the order filling / shipping area is one day or longer",
        "isCorrect": false
      }
    }
  },
  "11.36": {
    "question": "A diamond on a structure chart shows sequence – like a baseball player would go to first base, then second, third and home.",
    "choices": {
      "11.36.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.36.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.37": {
    "question": "Generally, transaction structures occur at lower levels of a structure chart.",
    "choices": {
      "11.37.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.37.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.38": {
    "question": "The second step in creating a Physical Data Flow Diagram is what?",
    "choices": {
      "11.38.A": {
        "choice": "Update the metadata in the CASE repository",
        "isCorrect": false
      },
      "11.38.B": {
        "choice": "Draw a human-machine boundary",
        "isCorrect": true
      },
      "11.38.C": {
        "choice": "Add implementation references",
        "isCorrect": false
      },
      "11.38.D": {
        "choice": "Add system-related data stores, data flows and processes",
        "isCorrect": false
      },
      "11.38.E": {
        "choice": "Update the data elements in the data flows",
        "isCorrect": false
      }
    }
  },
  "11.39": {
    "question": "When drawing the human-machine boundary, all processes in the physical DFD will be automated, so only external entities will be excluded.",
    "choices": {
      "11.39.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.39.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.40": {
    "question": "A good indication of needing a transaction structure on a structure chart occurs when a DFD shows a single data flow entering a process that produces multiple data flows as outputs.",
    "choices": {
      "11.40.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.40.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.41": {
    "question": "Control couples show the passing of parameters or system related messages between modules (like &#39;end-of-file&#39;).",
    "choices": {
      "11.41.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.41.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.42": {
    "question": "Analysts design programs in the design phase of the SDLC, programmers code programs in the Implementation phase.",
    "choices": {
      "11.42.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.42.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.43": {
    "question": "A control module can also be called a library module and is a set of reusable code.",
    "choices": {
      "11.43.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.43.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.44": {
    "question": "An afferent process is an input process on a structure chart.",
    "choices": {
      "11.44.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.44.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.45": {
    "question": "The three basic kinds of processes on a process module are afferent, central, and efferent.",
    "choices": {
      "11.45.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.45.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.46": {
    "question": "A signal of poor cohesion could be the presence of control flags that are passed down to subordinate modules.",
    "choices": {
      "11.46.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.46.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.47": {
    "question": "Physical DFDs show additional details, such as what tables in the database replace data stores on the logical DFD",
    "choices": {
      "11.47.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.47.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.48": {
    "question": "Structure charts show sequence.",
    "choices": {
      "11.48.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.48.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.49": {
    "question": "A temptation when moving from analysis to design of a system is to jump right into coding.",
    "choices": {
      "11.49.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.49.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.50": {
    "question": "Fan-In describes the number of subordinates that communicate with the control module.",
    "choices": {
      "11.50.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.50.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.51": {
    "question": "When designing programs, structure charts may have on-page and off-page connectors.",
    "choices": {
      "11.51.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.51.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.52": {
    "question": "The three types of basic processes on a process model are which of the following?",
    "choices": {
      "11.52.A": {
        "choice": "Sequence, selection and iteration processes",
        "isCorrect": false
      },
      "11.52.B": {
        "choice": "Navigation, status and work processes",
        "isCorrect": false
      },
      "11.52.C": {
        "choice": "Afferent, central and efferent processes",
        "isCorrect": true
      },
      "11.52.D": {
        "choice": "Batch, online and real time processes",
        "isCorrect": false
      },
      "11.52.E": {
        "choice": "Singular, bilateral and library processes",
        "isCorrect": false
      }
    }
  },
  "11.53": {
    "question": "A structure chart shows sequence, selection and data flows.",
    "choices": {
      "11.53.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.53.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.54": {
    "question": "Reusable modules, which are represented in the structure chart as rectangles with vertical lines on both sides, may often appear several times in a structure chart. These are called _____ modules.",
    "choices": {
      "11.54.A": {
        "choice": "conditional",
        "isCorrect": false
      },
      "11.54.B": {
        "choice": "control",
        "isCorrect": false
      },
      "11.54.C": {
        "choice": "library",
        "isCorrect": true
      },
      "11.54.D": {
        "choice": "loop",
        "isCorrect": false
      },
      "11.54.E": {
        "choice": "off-page connector",
        "isCorrect": false
      }
    }
  },
  "11.55": {
    "question": "In a structure chart, the purpose of a control couple is to do what?",
    "choices": {
      "11.55.A": {
        "choice": "Pass parameters from a subordinate module to the control module",
        "isCorrect": true
      },
      "11.55.B": {
        "choice": "Pass parameters from the control modules to a subordinate module",
        "isCorrect": false
      },
      "11.55.C": {
        "choice": "Pass data from a subordinate module to the control module",
        "isCorrect": false
      },
      "11.55.D": {
        "choice": "Pass data from the control module to a subordinate module",
        "isCorrect": false
      },
      "11.55.E": {
        "choice": "Chaperone the dance for programmers on the project",
        "isCorrect": false
      }
    }
  },
  "11.56": {
    "question": "Structure charts show couples.",
    "choices": {
      "11.56.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.56.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.57": {
    "question": "A structure chart is composed of modules that work together to form a program.",
    "choices": {
      "11.57.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.57.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.58": {
    "question": "Structure charts emphasize structure and reusability.",
    "choices": {
      "11.58.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.58.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.59": {
    "question": "An effective process is an output process on a structure chart.",
    "choices": {
      "11.59.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.59.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.60": {
    "question": "Data couples are shown by arrows with empty circles and show how data flows between modules.",
    "choices": {
      "11.60.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.60.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.61": {
    "question": "By definition, external entities on the DFD are what?",
    "choices": {
      "11.61.A": {
        "choice": "Are used as the starting point for the physical data flow diagram",
        "isCorrect": false
      },
      "11.61.B": {
        "choice": "Are outside the scope of the system",
        "isCorrect": true
      },
      "11.61.C": {
        "choice": "Will be the top of the structure chart",
        "isCorrect": false
      },
      "11.61.D": {
        "choice": "Will become database table entries",
        "isCorrect": false
      },
      "11.61.E": {
        "choice": "Are updated with metadata to become part of the physical DFD",
        "isCorrect": false
      }
    }
  },
  "11.62": {
    "question": "When creating the physical DFD, you may want to capture system information like date and time of update and user-id of the person who did the update.",
    "choices": {
      "11.62.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.62.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.63": {
    "question": "In most automated cases, data stores from logical DFDs will be converted to what?",
    "choices": {
      "11.63.A": {
        "choice": "Binary tables",
        "isCorrect": false
      },
      "11.63.B": {
        "choice": "DVD disks",
        "isCorrect": false
      },
      "11.63.C": {
        "choice": "A thumb drive",
        "isCorrect": false
      },
      "11.63.D": {
        "choice": "Into database files / tables",
        "isCorrect": true
      },
      "11.63.E": {
        "choice": "Encrypted hexadecimal values",
        "isCorrect": false
      }
    }
  },
  "11.64": {
    "question": "There are two symbols that describe special types of control in a structure chart. They are a curved arrow and a diamond. These symbols represent _____ and _____.",
    "choices": {
      "11.64.A": {
        "choice": "connector, conditional line",
        "isCorrect": false
      },
      "11.64.B": {
        "choice": "control, subordinate",
        "isCorrect": false
      },
      "11.64.C": {
        "choice": "library module, conditional line",
        "isCorrect": false
      },
      "11.64.D": {
        "choice": "loop, conditional line",
        "isCorrect": true
      },
      "11.64.E": {
        "choice": "loop, connector",
        "isCorrect": false
      }
    }
  },
  "11.65": {
    "question": "The Human-Machine boundary is part of the Human-Computer Interface into usability systems.",
    "choices": {
      "11.65.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.65.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  },
  "11.66": {
    "question": "Factoring is the process of separating out a function from a module in order to create a module of its own.",
    "choices": {
      "11.66.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.66.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.67": {
    "question": "In a structure chart, the element that communicates that a message or a system flag is being passed from one module to another is known as a(n) _____.",
    "choices": {
      "11.67.A": {
        "choice": "conditional line",
        "isCorrect": false
      },
      "11.67.B": {
        "choice": "connector",
        "isCorrect": false
      },
      "11.67.C": {
        "choice": "control couple",
        "isCorrect": true
      },
      "11.67.D": {
        "choice": "data couple",
        "isCorrect": false
      },
      "11.67.E": {
        "choice": "loop",
        "isCorrect": false
      }
    }
  },
  "11.68": {
    "question": "Structure charts show selection.",
    "choices": {
      "11.68.A": {
        "choice": "True",
        "isCorrect": true
      },
      "11.68.B": {
        "choice": "False",
        "isCorrect": false
      }
    }
  },
  "11.69": {
    "question": "Programmers can take the logical DFDs and directly implement into code by compiling the metadata in the CASE tools.",
    "choices": {
      "11.69.A": {
        "choice": "True",
        "isCorrect": false
      },
      "11.69.B": {
        "choice": "False",
        "isCorrect": true
      }
    }
  }
}